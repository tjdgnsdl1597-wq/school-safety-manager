generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  username      String   @unique // 로그인용 아이디 (중복 불가)
  password      String // 비밀번호 (나중에 암호화 예정)
  name          String // 사용자 실명 (한글명)
  position      String? // 직급
  phoneNumber   String? // 전화번호
  email         String? // 이메일 주소
  department    String   @default("산업안전팀") // 부서 (자동선택)
  profilePhoto  String? // 프로필 사진 URL (Google Cloud Storage)
  role          String   @default("user") // "super_admin" 또는 "user"
  isActive      Boolean  @default(false) // 계정 활성화 여부 (승인 전까지 비활성화)
  homeAddress   String? // 집 주소 (이동시간 계산용)
  officeAddress String? // 회사 주소 (이동시간 계산용)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // 관계 설정
  schools   School[]
  schedules Schedule[]
}

model School {
  id            String     @id @default(uuid())
  name          String     @unique
  phoneNumber   String?
  contactPerson String?
  email         String? // 학교 이메일
  address       String? // 학교 주소 (이동시간 계산용)
  userId        String // 어느 사용자가 등록했는지
  user          User       @relation(fields: [userId], references: [id])
  schedules     Schedule[]
}

model Schedule {
  id            String   @id @default(uuid())
  date          DateTime
  schoolId      String
  userId        String // 어느 사용자가 등록했는지
  ampm          String
  startTime     String
  endTime       String
  purpose       String
  otherReason   String?
  isHoliday     Boolean  @default(false)
  holidayReason String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  school        School   @relation(fields: [schoolId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
}

model Material {
  id          String               @id @default(uuid())
  title       String
  content     String?
  uploadedAt  DateTime             @default(now())
  uploader    String
  category    String
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  attachments MaterialAttachment[]
}

model MaterialAttachment {
  id            String   @id @default(uuid())
  materialId    String
  filename      String
  filePath      String
  fileSize      Int
  mimeType      String
  thumbnailPath String?
  uploadOrder   Int
  createdAt     DateTime @default(now())
  material      Material @relation(fields: [materialId], references: [id], onDelete: Cascade)
}
