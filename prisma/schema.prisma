generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(uuid())
  username      String     @unique
  password      String
  name          String
  position      String?
  phoneNumber   String?
  email         String?
  department    String     @default("산업안전팀")
  profilePhoto  String?
  role          String     @default("user")
  isActive      Boolean    @default(false)
  homeAddress   String?
  officeAddress String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  schedules     Schedule[]
  schools       School[]
  travelTimes   TravelTime[]
}

model School {
  id            String     @id @default(uuid())
  name          String     @unique
  phoneNumber   String?
  contactPerson String?
  email         String?
  address       String?
  userId        String
  schedules     Schedule[]
  user          User       @relation(fields: [userId], references: [id])
}

model Schedule {
  id            String   @id @default(uuid())
  date          DateTime
  schoolId      String
  userId        String
  ampm          String
  startTime     String
  endTime       String
  purpose       String
  otherReason   String?
  isHoliday     Boolean  @default(false)
  holidayReason String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id])
  school        School      @relation(fields: [schoolId], references: [id])
  travelTime    TravelTime?
}

model Material {
  id          String               @id @default(uuid())
  title       String
  content     String?
  uploadedAt  DateTime             @default(now())
  uploader    String
  category    String
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  attachments MaterialAttachment[]
}

model MaterialAttachment {
  id            String   @id @default(uuid())
  materialId    String
  filename      String
  filePath      String
  fileSize      Int
  mimeType      String
  thumbnailPath String?
  uploadOrder   Int
  createdAt     DateTime @default(now())
  material      Material @relation(fields: [materialId], references: [id], onDelete: Cascade)
}

model TravelTime {
  id                String   @id @default(uuid())
  userId            String
  scheduleId        String   @unique
  fromOfficeTime    String?  // 회사에서 출발하는 시간
  fromHomeTime      String?  // 집에서 출발하는 시간  
  toPreviousTime    String?  // 이전 학교에서 이동하는 시간
  duration          String?  // 이동 소요 시간 (예: "32분")
  distance          String?  // 이동 거리 (예: "15.2km")
  origin            String?  // 출발지 (집/회사/이전학교명)
  calculatedAt      DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User     @relation(fields: [userId], references: [id])
  schedule          Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
}
